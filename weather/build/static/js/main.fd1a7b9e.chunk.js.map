{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","city","temp","tempScale","handleSubmit","_this2","console","log","setState","fetch","concat","mode","then","response","json","main","_this3","parseFloat","toFixed","isNaN","react_default","a","createElement","className","App_CityForm","onSubmit","onTempScaleChange","handleTempScaleChange","href","target","rel","Component","CityForm","_this4","handleChange","bind","assertThisInitialized","event","value","preventDefault","type","onChange","name","checked","React","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fd1a7b9e.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      city: \"Chicago\",\n      temp: \"Loading...\",\n      tempScale: 'F',\n    }\n  }\n\n  componentDidMount() {\n    this.handleSubmit(this.state.city)\n    // if I want polling every x seconds\n    // https://stackoverflow.com/questions/46140764/polling-api-every-x-seconds-with-react\n  }\n\n  handleSubmit(city) {\n    console.log('A city was submitted: ' + city);\n    this.setState({\n      city: city,\n      temp: \"Loading...\"\n    })\n    fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city}&APPID=e686eb81691141fa6168377f12b326cd`, {mode: 'cors'})\n      .then(function(response){\n        return response.json()\n      })\n      .then((response) => {\n        this.setState({temp: response.main.temp})\n        console.log(response)\n      })\n  }\n  handleTempScaleChange(tempScale) {\n    this.setState({tempScale: tempScale})\n  }\n\n  render() {\n    let temp = this.state.temp;\n    switch(this.state.tempScale){\n      case 'F':\n        temp = parseFloat(this.state.temp * 9 / 5 - 459.67).toFixed(2)\n        break;\n      case 'C':\n        temp = parseFloat(this.state.temp - 273.15).toFixed(2)\n        break;\n      default:\n        temp = this.state.temp\n      }\n      temp = isNaN(temp) ? \"Loading...\" : temp\n    return (\n      <div className=\"App\">\n          <h1>\n            Weather\n          </h1>\n          <CityForm\n            city = {this.state.city}\n            tempScale = {this.state.tempScale}\n            onSubmit={(city) => this.handleSubmit(city)}\n            onTempScaleChange={(tempScale) => this.handleTempScaleChange(tempScale)}\n          />\n          <p>\n            {this.state.city} : {temp}\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://openweathermap.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Weather Data from OpenWeatherMap\n          </a>\n      </div>\n    );\n  }\n}\n\n// I think idealy you would move handleChange() upto App as we did with handleTempScaleChange()\nclass CityForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      city: props.city,\n      //selectedTempScale: props.tempScale,\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleTempScaleChange = this.handleTempScaleChange.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({city: event.target.value});\n  }\n\n  handleTempScaleChange(event) {\n    //this.setState({selectedTempScale: event.target.value});\n    this.props.onTempScaleChange(event.target.value)\n    //console.log(event.target.value);\n  }\n\n  handleSubmit(event) {\n    this.props.onSubmit(this.state.city)\n    event.preventDefault();\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <label>\n          City:\n          <input type=\"text\" value={this.state.city} onChange={this.handleChange} />\n        </label>\n        <input type=\"submit\" value=\"Submit\" />\n        <span>\n          F\n          <input type=\"radio\" name=\"tempScale\" value='F'\n            checked={this.props.tempScale === 'F'}\n            onChange={this.handleTempScaleChange} />\n        </span>\n        <span>\n          C\n          <input type=\"radio\" name=\"tempScale\" value='C'\n            checked={this.props.tempScale === 'C'}\n            onChange={this.handleTempScaleChange} />\n        </span>\n      </form>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}